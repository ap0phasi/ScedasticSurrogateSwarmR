source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("C:/Users/johnm/Documents/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
?poly
source("~/GitHub/StochasticSurrogateSwarm/tests/test_known_constraints.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_nn_tighter.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
search_state$current_pout
search_state$pos.x
source("~/GitHub/StochasticSurrogateSwarm/R/search_functions.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
devtools::document()
getwd()
devtools::create("ScedasticSurrogateSwarmR")
getwd()
setwd("..")
devtools::create("ScedasticSurrogateSwarmR")
getwd()
devtools::document()
setwd("ScedasticSurrogateSwarmR")
devtools::document()
devtools::document()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(ScedasticSurrogateSwarmR)
set.seed(128)
# Chunk 3
model_function <-function(params,ls){
modval<-params[1]*cos(xdat*params[2])+params[2]*sin(xdat*params[1])
return(modval)
}
# Chunk 4
#Equality Constraints
eq <- function(params){
constraints = c(
)
return(constraints)
}
#Inequality Constraints
# of form <= 0
ineq <- function(params){
constraints = c(
)
return(constraints)
}
# Chunk 5
xdat=seq(1,100,0.5)
params=c(0.32,0.4)
ydat=modf(params)
lowlim=rep(0,2)
highlim=rep(1,2)
# Chunk 6
swarm_state <- initialize_swarm(desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,deg=2))
# Chunk 7
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
plot(swarm_state$x.p)
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec),ls),col="red")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Suboptimized (Predicted)","Suboptimized"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
devtools::document()
library(ScedasticSurrogateSwarmR)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(ScedasticSurrogateSwarmR)
set.seed(128)
# Chunk 3
model_function <-function(params,ls){
modval<-params[1]*cos(xdat*params[2])+params[2]*sin(xdat*params[1])
return(modval)
}
# Chunk 4
#Equality Constraints
eq <- function(params){
constraints = c(
)
return(constraints)
}
#Inequality Constraints
# of form <= 0
ineq <- function(params){
constraints = c(
)
return(constraints)
}
# Chunk 5
xdat=seq(1,100,0.5)
params=c(0.32,0.4)
ydat=modf(params)
lowlim=rep(0,2)
highlim=rep(1,2)
# Chunk 6
swarm_state <- initialize_swarm(desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,deg=2))
# Chunk 7
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
plot(swarm_state$x.p)
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec),ls),col="red")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Suboptimized (Predicted)","Suboptimized"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
source("~/GitHub/StochasticSurrogateSwarm/tests/search_hart6.R")
source("~/GitHub/StochasticSurrogateSwarm/tests/search_2d_swap.R")
devtools::install_github("ap0phasi/ScedasticSurrogateSwarmR")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
rm(list=ls())
library(ScedasticSurrogateSwarmR)
set.seed(128)
# Chunk 3
model_function <-function(params){
modval<-params[1]*cos(xdat*params[2])+params[2]*sin(xdat*params[1])
return(modval)
}
# Chunk 4
#Equality Constraints
eq <- function(params){
constraints = c(
)
return(constraints)
}
#Inequality Constraints
# of form <= 0
ineq <- function(params){
constraints = c(
)
return(constraints)
}
# Chunk 5
xdat=seq(1,100,0.5)
params=c(0.32,0.4)
ydat=modf(params)
lowlim=rep(0,2)
highlim=rep(1,2)
# Chunk 6
swarm_state <- initialize_swarm(desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,deg=2))
# Chunk 7
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
# Chunk 8
search_state <- initialize_search(param_len = 2,lowlim=lowlim,highlim=highlim,config = search.config())
genstate = F
for (itt in 1:10){
tempconfig = search.config(gen = genstate,revert_best = T)
search_state <- step_search(desired_values = ydat,search_state,ineq_w = c(),eq_w=c(),config = tempconfig)
modout = model_function(as.vector(search_state$poly_recs[1,]))
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),search_state$polyouts,search_state$centersaves,deg=2)
if (mean(abs((modout-surrogate_out)/modout))>2){
genstate = T
}else{
genstate = F
}
par(oma=c(0, 0, 0, 5))
matplot(xdat,search_state$current_pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(search_state$poly_recs[1,])),col="red")
title("Surrogate Search Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(search_state$xpins)[1]))
# Chunk 9
usevec = (dim(search_state$xpins)[1]-50):dim(search_state$xpins)[1]
#Swap into particle swarm
swarm_state <- convert_search_to_swarm(search_state = search_state,usevec = usevec,desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,deg=2))
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Search-Initialized Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n',
xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
traceback()
search_state <- initialize_search(param_len = 2,lowlim=lowlim,highlim=highlim,config = search.config())
genstate = F
for (itt in 1:10){
tempconfig = search.config(gen = genstate,revert_best = T)
search_state <- step_search(desired_values = ydat,search_state,ineq_w = c(),eq_w=c(),config = tempconfig)
modout = model_function(as.vector(search_state$poly_recs[1,]))
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),search_state$polyouts,search_state$centersaves,deg=2)
if (mean(abs((modout-surrogate_out)/modout))>2){
genstate = T
}else{
genstate = F
}
par(oma=c(0, 0, 0, 5))
matplot(xdat,search_state$current_pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(search_state$poly_recs[1,])),col="red")
title("Surrogate Search Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(search_state$xpins)[1]))
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
search_state <- initialize_search(param_len = 2,lowlim=lowlim,highlim=highlim,config = search.config())
genstate = F
for (itt in 1:10){
tempconfig = search.config(gen = genstate,revert_best = T)
search_state <- step_search(desired_values = ydat,search_state,ineq_w = c(),eq_w=c(),config = tempconfig)
modout = model_function(as.vector(search_state$poly_recs[1,]))
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),search_state$polyouts,search_state$centersaves,deg=2)
if (mean(abs((modout-surrogate_out)/modout))>2){
genstate = T
}else{
genstate = F
}
par(oma=c(0, 0, 0, 5))
matplot(xdat,search_state$current_pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(search_state$poly_recs[1,])),col="red")
title("Surrogate Search Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(search_state$xpins)[1]))
devtools::install()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
rm(list=ls())
library(ScedasticSurrogateSwarmR)
set.seed(128)
# Chunk 3
model_function <-function(params){
modval<-params[1]*cos(xdat*params[2])+params[2]*sin(xdat*params[1])
return(modval)
}
# Chunk 4
#Equality Constraints
eq <- function(params){
constraints = c(
)
return(constraints)
}
#Inequality Constraints
# of form <= 0
ineq <- function(params){
constraints = c(
)
return(constraints)
}
# Chunk 5
xdat=seq(1,100,0.5)
params=c(0.32,0.4)
ydat=modf(params)
lowlim=rep(0,2)
highlim=rep(1,2)
# Chunk 6
swarm_state <- initialize_swarm(desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,deg=2))
# Chunk 7
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
# Chunk 8
search_state <- initialize_search(param_len = 2,lowlim=lowlim,highlim=highlim,config = search.config())
genstate = F
for (itt in 1:10){
tempconfig = search.config(gen = genstate,revert_best = T)
search_state <- step_search(desired_values = ydat,search_state,ineq_w = c(),eq_w=c(),config = tempconfig)
modout = model_function(as.vector(search_state$poly_recs[1,]))
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),search_state$polyouts,search_state$centersaves,deg=2)
if (mean(abs((modout-surrogate_out)/modout))>2){
genstate = T
}else{
genstate = F
}
par(oma=c(0, 0, 0, 5))
matplot(xdat,search_state$current_pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(search_state$poly_recs[1,])),col="red")
title("Surrogate Search Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(search_state$xpins)[1]))
# Chunk 9
usevec = (dim(search_state$xpins)[1]-50):dim(search_state$xpins)[1]
#Swap into particle swarm
swarm_state <- convert_search_to_swarm(search_state = search_state,usevec = usevec,desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,deg=2))
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Search-Initialized Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n',
xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
rm(list=ls())
library(ScedasticSurrogateSwarmR)
set.seed(128)
# Chunk 3
model_function <-function(params){
modval<-params[1]*cos(xdat*params[2])+params[2]*sin(xdat*params[1])
return(modval)
}
# Chunk 4
#Equality Constraints
eq <- function(params){
constraints = c(
)
return(constraints)
}
#Inequality Constraints
# of form <= 0
ineq <- function(params){
constraints = c(
)
return(constraints)
}
# Chunk 5
xdat=seq(1,100,0.5)
params=c(0.32,0.4)
ydat=modf(params)
lowlim=rep(0,2)
highlim=rep(1,2)
# Chunk 6
swarm_state <- initialize_swarm(desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,deg=2))
# Chunk 7
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=100,num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
# Chunk 8
search_state <- initialize_search(param_len = 2,lowlim=lowlim,highlim=highlim,config = search.config())
genstate = F
for (itt in 1:10){
tempconfig = search.config(gen = genstate,revert_best = T)
search_state <- step_search(desired_values = ydat,search_state,ineq_w = c(),eq_w=c(),config = tempconfig)
modout = model_function(as.vector(search_state$poly_recs[1,]))
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),search_state$polyouts,search_state$centersaves,deg=2)
if (mean(abs((modout-surrogate_out)/modout))>2){
genstate = T
}else{
genstate = F
}
par(oma=c(0, 0, 0, 5))
matplot(xdat,search_state$current_pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(search_state$poly_recs[1,]),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(search_state$poly_recs[1,])),col="red")
title("Surrogate Search Optimization")
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(search_state$xpins)[1]))
# Chunk 9
usevec = (dim(search_state$xpins)[1]-50):dim(search_state$xpins)[1]
#Swap into particle swarm
swarm_state <- convert_search_to_swarm(search_state = search_state,usevec = usevec,desired_values = ydat,param_len = 2,lowlim=lowlim,highlim=highlim,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,deg=2))
for (itt in 1:10){
tempcontrol = swarm.control(poly_w=0.2,stoch_w = 0.01)
swarm_state <- step_swarm(desired_values = ydat,swarm_state,ineq_w = c(),eq_w=c(),config = swarm.config(swarm_size=length(usevec),num_cluster=3,swarm.control = tempcontrol))
par(oma=c(0, 0, 0, 5))
matplot(xdat,swarm_state$pout,type="l",col="grey",xlab = NULL,ylab="value")
points(xdat,ydat)
surrogate_out <- surrogate_model(as.vector(swarm_state$poly_rec),swarm_state$polyouts,swarm_state$centersaves,deg=2)
lines(xdat,surrogate_out,col="blue")
lines(xdat,model_function(as.vector(swarm_state$poly_rec)),col="red")
title("Search-Initialized Scedastic Surrogate Swarm Optimization")
legend(par('usr')[2], par('usr')[4], bty='n',
xpd=NA,c("Observed","Modeled","Predicted","Actual"),fill=c("black","grey","blue","red"))
}
print(paste("Number of function evals: ",dim(swarm_state$allxp)[1]))
rmarkdown::render()
getwd()
rmarkdown::render(file.path(getwd(),"introduction.Rmd"))
rmarkdown::render(file.path(getwd(),"vignettes.introduction.Rmd"))
rmarkdown::render(file.path(getwd(),"vignettes/introduction.Rmd"))
rmarkdown::render(file.path(getwd(),"vignettes/fit_radial_basis_functions.Rmd"))
rmarkdown::render(file.path(getwd(),"vignettes/nn_optimization.Rmd"))
rmarkdown::render(file.path(getwd(),"vignettes/nn_optimization.Rmd"))
